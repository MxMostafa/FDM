// <auto-generated />
using System;
using Client.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Client.Infrastructure.Migrations
{
    [DbContext(typeof(FdmDbContext))]
    partial class FdmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Client.Domain.Entites.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppSettingType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppSettingType = 0,
                            Created = new DateTime(2024, 12, 28, 0, 33, 25, 678, DateTimeKind.Local).AddTicks(1323),
                            Key = "TempSavePathTextbox",
                            Updated = new DateTime(2024, 12, 28, 0, 33, 25, 678, DateTimeKind.Local).AddTicks(1327),
                            Value = "C:\\Users\\Sattec\\AppData\\Roaming\\FDM"
                        });
                });

            modelBuilder.Entity("Client.Domain.Entites.CategoryGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CategoryGroups");
                });

            modelBuilder.Entity("Client.Domain.Entites.CategoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryGroupId");

                    b.ToTable("CategoryItems");
                });

            modelBuilder.Entity("Client.Domain.Entites.DownloadFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("DownloadPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DownloadQueueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DownloadStatus")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DownloadedBytes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("FileTypeGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocalSavePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DownloadQueueId");

                    b.HasIndex("FileTypeGroupId");

                    b.ToTable("DownloadFiles");
                });

            modelBuilder.Entity("Client.Domain.Entites.DownloadFileChunk", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<int>("DownloadFileChunkStatus")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DownloadFileId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("End")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Start")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TempFilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DownloadFileId");

                    b.ToTable("DownloadFileChunks");
                });

            modelBuilder.Entity("Client.Domain.Entites.DownloadQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DownloadQueues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 12, 28, 0, 33, 25, 677, DateTimeKind.Local).AddTicks(3700),
                            IsDeleted = false,
                            Title = "صف اصلی",
                            Updated = new DateTime(2024, 12, 28, 0, 33, 25, 677, DateTimeKind.Local).AddTicks(3704)
                        });
                });

            modelBuilder.Entity("Client.Domain.Entites.FileTypeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileExtensions")
                        .HasColumnType("TEXT");

                    b.Property<string>("FolderName")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SavePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FileTypeGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2024, 12, 28, 0, 33, 25, 674, DateTimeKind.Local).AddTicks(92),
                            FileExtensions = "zip rar",
                            FolderName = "Compressed",
                            IsDeleted = false,
                            SavePath = "C:\\Users\\Sattec\\Downloads\\Compressed",
                            Title = "فایل های فشرده",
                            Updated = new DateTime(2024, 12, 28, 0, 33, 25, 675, DateTimeKind.Local).AddTicks(9433)
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2024, 12, 28, 0, 33, 25, 676, DateTimeKind.Local).AddTicks(5644),
                            FileExtensions = "txt docx xls",
                            FolderName = "Documents",
                            IsDeleted = false,
                            SavePath = "C:\\Users\\Sattec\\Downloads\\Documents",
                            Title = "اسناد",
                            Updated = new DateTime(2024, 12, 28, 0, 33, 25, 676, DateTimeKind.Local).AddTicks(5647)
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2024, 12, 28, 0, 33, 25, 676, DateTimeKind.Local).AddTicks(6149),
                            FileExtensions = "mp3 wave",
                            FolderName = "Music",
                            IsDeleted = false,
                            SavePath = "C:\\Users\\Sattec\\Downloads\\Music",
                            Title = "موسیقی",
                            Updated = new DateTime(2024, 12, 28, 0, 33, 25, 676, DateTimeKind.Local).AddTicks(6150)
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2024, 12, 28, 0, 33, 25, 676, DateTimeKind.Local).AddTicks(6575),
                            FileExtensions = "exe msi",
                            FolderName = "Video",
                            IsDeleted = false,
                            SavePath = "C:\\Users\\Sattec\\Downloads\\Video",
                            Title = "برنامه ها",
                            Updated = new DateTime(2024, 12, 28, 0, 33, 25, 676, DateTimeKind.Local).AddTicks(6576)
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2024, 12, 28, 0, 33, 25, 676, DateTimeKind.Local).AddTicks(6977),
                            FileExtensions = "mpeg 3gp avi flv",
                            FolderName = "Compressed",
                            IsDeleted = false,
                            SavePath = "C:\\Users\\Sattec\\Downloads\\Compressed",
                            Title = "تصویری",
                            Updated = new DateTime(2024, 12, 28, 0, 33, 25, 676, DateTimeKind.Local).AddTicks(6978)
                        });
                });

            modelBuilder.Entity("Client.Domain.Entites.CategoryItem", b =>
                {
                    b.HasOne("Client.Domain.Entites.CategoryGroup", "CategoryGroup")
                        .WithMany()
                        .HasForeignKey("CategoryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryGroup");
                });

            modelBuilder.Entity("Client.Domain.Entites.DownloadFile", b =>
                {
                    b.HasOne("Client.Domain.Entites.DownloadQueue", "DownloadQueue")
                        .WithMany()
                        .HasForeignKey("DownloadQueueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Client.Domain.Entites.FileTypeGroup", "FileTypeGroup")
                        .WithMany()
                        .HasForeignKey("FileTypeGroupId");

                    b.Navigation("DownloadQueue");

                    b.Navigation("FileTypeGroup");
                });

            modelBuilder.Entity("Client.Domain.Entites.DownloadFileChunk", b =>
                {
                    b.HasOne("Client.Domain.Entites.DownloadFile", "DownloadFile")
                        .WithMany("DownloadFileChunks")
                        .HasForeignKey("DownloadFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DownloadFile");
                });

            modelBuilder.Entity("Client.Domain.Entites.DownloadFile", b =>
                {
                    b.Navigation("DownloadFileChunks");
                });
#pragma warning restore 612, 618
        }
    }
}
